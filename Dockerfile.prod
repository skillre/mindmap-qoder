# 生产环境轻量级Dockerfile

# 阶段1: 构建前端应用
FROM node:16-alpine AS frontend-builder

WORKDIR /app

# 优化缓存：先复制package文件
COPY web/package*.json ./web/
COPY simple-mind-map/package*.json ./simple-mind-map/

# 安装依赖
RUN cd web && npm ci --only=production --silent
RUN cd simple-mind-map && npm ci --only=production --silent

# 复制源代码
COPY web/ ./web/
COPY simple-mind-map/ ./simple-mind-map/

# 构建前端应用
RUN cd web && npm run build

# 阶段2: 构建后端应用
FROM node:16-alpine AS backend-builder

WORKDIR /app

# 复制package文件并安装依赖
COPY server/package*.json ./
RUN npm ci --only=production --silent

# 复制后端源代码
COPY server/ ./

# 阶段3: 最终运行环境
FROM node:16-alpine AS production

# 安装nginx
RUN apk add --no-cache nginx

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# 创建必要目录
RUN mkdir -p /app/backend /var/log/nginx /var/cache/nginx /etc/nginx/conf.d && \
    chown -R nginx:nginx /var/log/nginx /var/cache/nginx /etc/nginx

# 复制构建文件
COPY --from=frontend-builder /app/web/dist /usr/share/nginx/html
COPY --from=backend-builder /app /app/backend

# 复制nginx配置
COPY nginx.conf /etc/nginx/nginx.conf

# 创建健康检查脚本
RUN echo '#!/bin/sh' > /health-check.sh && \
    echo 'curl -f http://localhost/health || exit 1' >> /health-check.sh && \
    chmod +x /health-check.sh

# 安装curl用于健康检查
RUN apk add --no-cache curl

# 创建启动脚本
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'echo "Starting backend server..."' >> /start.sh && \
    echo 'cd /app/backend && node index.js &' >> /start.sh && \
    echo 'echo "Starting nginx..."' >> /start.sh && \
    echo 'nginx -g "daemon off;"' >> /start.sh && \
    chmod +x /start.sh

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD /health-check.sh

# 切换到非root用户
USER nginx

# 启动服务
CMD ["/start.sh"]